import React, {FormEvent, useState} from 'react';import {EyeOffIcon} from '../eyeIcons/eyeOffIcon';import {EyeOnIcon} from '../eyeIcons/eyeOnIcon';import {signUpUser} from '../../api/manageUserAccess';import classes from './SignForms.module.css';export const SignUpForm: React.FC = () => {	const [fullName, setFullName] = useState('');	const [userName, setUserName] = useState('');	const [password, setPassword] = useState('');	const [confirmPassword, setConfirmPassword] = useState('');	const [showPassword, setShowPassword] = useState(false);	const currentInputType = showPassword ? 'text' : 'password';	const buttonActive = !fullName || !userName || !password || !confirmPassword;	const clearFields = () => {		setFullName('');		setUserName('');		setPassword('');		setConfirmPassword('');	}	const handleCreateUser = (e: FormEvent) => {		e.preventDefault();		if (password !== confirmPassword) {			window.alert("Password must be equal to the confirm password!");			return;		}		signUpUser({			password,			username: userName,			displayName: fullName,		})			.then(() => {				window.alert('User registered, now you can sign in!');				clearFields();			})			.catch((error) => {				switch (error.message) {					case 'Conflict':						window.alert('Username is already used, please sign in or choose other username.');						break;					default:						window.alert('Something went wrong, try again!');						break;				}			})	};	return (		<form onSubmit={handleCreateUser}>			<label				htmlFor="full-name"				className={classes.text_field_label}			>				Full Name				<input					type="text"					id="full-name"					className={classes.text_field_input}					placeholder="Example Name"					autoComplete='full-name'					required					minLength={4}					disabled={false}					value={fullName}					onChange={e => setFullName(e.target.value)}				/>			</label>			<label				htmlFor="user-name"				className={classes.text_field_label}			>				User Name				<input					type="text"					id="user-name"					className={classes.text_field_input}					placeholder="Example123"					autoComplete='username'					required					minLength={4}					disabled={false}					value={userName}					onChange={e => setUserName(e.target.value)}				/>			</label>			<label				htmlFor="password"				className={classes.text_field_label}			>				Password				<input					type={currentInputType}					id="password"					className={classes.text_field_input}					placeholder="************"					autoComplete='new-password'					required					minLength={8}					disabled={false}					value={password}					onChange={e => setPassword(e.target.value)}				/>				<button					type="button"					className={classes.text_field_eyeIcon}					onClick={() => setShowPassword(prev => !prev)}				>					{showPassword ? <EyeOffIcon /> : <EyeOnIcon />}				</button>			</label>			<label				htmlFor="confirm-password"				className={`${classes.text_field_label} ${classes.text_field_label__last}`}			>				Confirm Password				<input					type={currentInputType}					id="confirm-password"					className={classes.text_field_input}					placeholder="************"					autoComplete='new-password'					required					minLength={8}					disabled={false}					value={confirmPassword}					onChange={e => setConfirmPassword(e.target.value)}				/>				<button					type="button"					className={classes.text_field_eyeIcon}					onClick={() => setShowPassword(prev => !prev)}				>					{showPassword ? <EyeOffIcon /> : <EyeOnIcon />}				</button>			</label>			<button				type="submit"				className={classes.button}				disabled={buttonActive}			>				Sign Up			</button>		</form>	)}